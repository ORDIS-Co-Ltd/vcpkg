if(VCPKG_CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
    message(FATAL_ERROR "${PORT} does not currently support UWP")
endif()

if (VCPKG_LIBRARY_LINKAGE STREQUAL static)
  if(NOT VCPKG_CMAKE_SYSTEM_NAME)
    set(DLL_DECORATOR s)
  endif()
  set(MPC_STATIC_FLAG -static)
endif()
include(vcpkg_common_functions)
set(ACE_ROOT ${CURRENT_BUILDTREES_DIR}/src/ACE_wrappers)
set(TAO_ROOT ${ACE_ROOT}/tao)
set(ENV{ACE_ROOT} ${ACE_ROOT})
set(ENV{TAO_ROOT} ${TAO_ROOT})
set(QTDIR "C:\\local\\Qt\\5.12.0\\msvc2017_64")
set(ENV{QTDIR} ${QTDIR})
set(ACE_SOURCE_PATH ${CURRENT_BUILDTREES_DIR}/src/ACE_wrappers/ace)
set(TAO_SOURCE_PATH ${CURRENT_BUILDTREES_DIR}/src/ACE_wrappers/TAO/tao)

set(INSTALLED_PATH ${VCPKG_ROOT_DIR}/installed/${TARGET_TRIPLET})
if(${CMAKE_BUILD_TYPE} MATCHES "^Debug$")
set(INSTALLED_PATH ${VCPKG_ROOT_DIR}/installed/${TARGET_TRIPLET}/debug)
endif()

set(SSL_ROOT ${INSTALLED_PATH})
set(ENV{SSL_ROOT} ${SSL_ROOT})
set(ENV{ZLIB_ROOT} ${INSTALLED_PATH})
set(ENV{BOOST_ROOT} ${INSTALLED_PATH})
set(ENV{BZIP2_ROOT} ${INSTALLED_PATH})


vcpkg_download_distfile(ARCHIVE
    URLS "http://github.com/DOCGroup/ACE_TAO/releases/download/ACE%2BTAO-6_5_5/ACE+TAO-src-6.5.5.zip"
    FILENAME ACE+TAO-src-6.5.5.zip
    SHA512 888295877d498b85168cea7b199aba4805b920e9e9f3e65865e3190e5b00b1574c3b941b4a76bc7ef4c5d21d3dc03865cbc6f5286fea4c37643390fb211c76a2
)
vcpkg_extract_source_archive(${ARCHIVE})

vcpkg_acquire_msys(MSYS_ROOT)
set(BASH ${MSYS_ROOT}/usr/bin/bash.exe)
set(MAKE ${MSYS_ROOT}/usr/bin/make.exe)

vcpkg_find_acquire_program(PERL)
get_filename_component(PERL_PATH ${PERL} DIRECTORY)
vcpkg_add_to_path(${PERL_PATH})

if (TRIPLET_SYSTEM_ARCH MATCHES "arm")
    message(FATAL_ERROR "ARM is currently not supported.")
elseif (TRIPLET_SYSTEM_ARCH MATCHES "x86")
    set(MSBUILD_PLATFORM "Win32")
else ()
    set(MSBUILD_PLATFORM ${TRIPLET_SYSTEM_ARCH})
endif()

# Add ace/config.h file
# see https://htmlpreview.github.io/?https://github.com/DOCGroup/ACE_TAO/blob/master/ACE/ACE-INSTALL.html
if(NOT VCPKG_CMAKE_SYSTEM_NAME)
  set(LIB_RELEASE_SUFFIX .lib)
  set(LIB_DEBUG_SUFFIX d.lib)
  if(VCPKG_PLATFORM_TOOLSET MATCHES "v142")
    set(SOLUTION_TYPE vs2019)
  elseif(VCPKG_PLATFORM_TOOLSET MATCHES "v141")
    set(SOLUTION_TYPE vs2017)
  else()
    set(SOLUTION_TYPE vc14)
  endif()
  file(WRITE ${ACE_SOURCE_PATH}/config.h "#include \"ace/config-windows.h\"\n#define ACE_NO_INLINE")
endif()

if(VCPKG_CMAKE_SYSTEM_NAME STREQUAL "Linux")
  set(DLL_DECORATOR)
  set(LIB_RELEASE_SUFFIX .a)
  set(LIB_DEBUG_SUFFIX .a)
  set(LIB_PREFIX lib)
  set(SOLUTION_TYPE gnuace)
  file(WRITE ${ACE_SOURCE_PATH}/config.h "#include \"ace/config-linux.h\"")
  file(WRITE ${ACE_ROOT}/include/makeinclude/platform_macros.GNU "include $(ACE_ROOT)include/makeinclude/platform_linux.GNU")
endif()

# Invoke mwc.pl to generate the necessary solution and project files

vcpkg_execute_required_process(
    COMMAND ${PERL} ${ACE_ROOT}/bin/mwc.pl -type ${SOLUTION_TYPE} tao_ace.mwc ${MPC_STATIC_FLAG} -features stl=1,boost=1,mfc=0,ace_for_tao=0,ace_inline=0,ssl=1,openssl11=0,qt5=1,zlib=1 -use_env -expand_vars
    WORKING_DIRECTORY ${TAO_ROOT}
    LOGNAME mwc-tao-${TARGET_TRIPLET}
)

if(NOT VCPKG_CMAKE_SYSTEM_NAME)
  
  vcpkg_build_msbuild(
    PROJECT_PATH ${TAO_ROOT}/tao_ace.sln
    PLATFORM ${MSBUILD_PLATFORM}
  ) 
endif()

if(VCPKG_CMAKE_SYSTEM_NAME STREQUAL "Linux")
  FIND_PROGRAM(MAKE make)
  IF (NOT MAKE)
    MESSAGE(FATAL_ERROR "MAKE not found")
  ENDIF ()
  vcpkg_execute_required_process(
    COMMAND make
    WORKING_DIRECTORY ${ACE_ROOT}/ace
    LOGNAME make-${TARGET_TRIPLET}
  )
endif()

# ACE itself does not define an install target, so it is not clear which
# headers are public and which not. For the moment we install everything
# that is in the source path and ends in .h, .inl
function(install_ace_headers_subdirectory SOURCE_PATH RELATIVE_PATH)
    file(GLOB HEADER_FILES ${SOURCE_PATH}/${RELATIVE_PATH}/*.h ${SOURCE_PATH}/${RELATIVE_PATH}/*.inl)
    file(INSTALL ${HEADER_FILES} DESTINATION ${CURRENT_PACKAGES_DIR}/include/ace/${RELATIVE_PATH})
endfunction()

# We manually install header found in the ace directory because in that case
# we are supposed to install also *cpp files, see ACE_wrappers\debian\libace-dev.install file
file(GLOB HEADER_FILES ${SOURCE_PATH}/*.h ${SOURCE_PATH}/*.inl ${SOURCE_PATH}/*.cpp)
file(INSTALL ${HEADER_FILES} DESTINATION ${CURRENT_PACKAGES_DIR}/include/ace/)

# For TAO
function(install_tao_headers_subdirectory SOURCE_PATH RELATIVE_PATH)
    file(GLOB HEADER_FILES ${SOURCE_PATH}/${RELATIVE_PATH}/*.h ${SOURCE_PATH}/${RELATIVE_PATH}/*.inl ${SOURCE_PATH}/${RELATIVE_PATH}/*.cpp)
    file(INSTALL ${HEADER_FILES} DESTINATION ${CURRENT_PACKAGES_DIR}/include/tao/${RELATIVE_PATH})
endfunction()

function(install_orbsvcs_headers_subdirectory SOURCE_PATH RELATIVE_PATH)
    file(GLOB HEADER_FILES ${SOURCE_PATH}/${RELATIVE_PATH}/*.h ${SOURCE_PATH}/${RELATIVE_PATH}/*.inl ${SOURCE_PATH}/${RELATIVE_PATH}/*.cpp)
    file(INSTALL ${HEADER_FILES} DESTINATION ${CURRENT_PACKAGES_DIR}/include/orbsvcs/${RELATIVE_PATH})
endfunction()

set(EXECUTABLE_SUFFIX ".exe")
if(VCPKG_CMAKE_SYSTEM_NAME STREQUAL "Linux")
set(EXECUTABLE_SUFFIX "")
endif()

function(install_tao_executables SOURCE_PATH EXE_FILE)
	set(TEMP_EXE_DIR ${ACE_ROOT}/temp)
	#file(MAKE_DIRECTORY ${TEMP_EXE_DIR})
	file(COPY ${SOURCE_PATH}/${EXE_FILE}${EXECUTABLE_SUFFIX} DESTINATION ${TEMP_EXE_DIR})
	file(INSTALL ${TEMP_EXE_DIR}/${EXE_FILE}${EXECUTABLE_SUFFIX} DESTINATION ${CURRENT_PACKAGES_DIR}/tools/ace-tao)
endfunction()


file(GLOB HEADER_FILES ${ACE_SOURCE_PATH}/*.h ${ACE_SOURCE_PATH}/*.inl ${ACE_SOURCE_PATH}/*.cpp)
file(INSTALL ${HEADER_FILES} DESTINATION ${CURRENT_PACKAGES_DIR}/include/ace/)

# Install headers in subdirectory
install_ace_headers_subdirectory(${ACE_SOURCE_PATH} "Compression")
install_ace_headers_subdirectory(${ACE_SOURCE_PATH} "Compression/rle")
install_ace_headers_subdirectory(${ACE_SOURCE_PATH} "ETCL")
install_ace_headers_subdirectory(${ACE_SOURCE_PATH} "QoS")
install_ace_headers_subdirectory(${ACE_SOURCE_PATH} "Monitor_Control")
install_ace_headers_subdirectory(${ACE_SOURCE_PATH} "os_include")
install_ace_headers_subdirectory(${ACE_SOURCE_PATH} "os_include/arpa")
install_ace_headers_subdirectory(${ACE_SOURCE_PATH} "os_include/net")
install_ace_headers_subdirectory(${ACE_SOURCE_PATH} "os_include/netinet")
install_ace_headers_subdirectory(${ACE_SOURCE_PATH} "os_include/sys")

file(GLOB HEADER_FILES ${TAO_SOURCE_PATH}/*.h ${TAO_SOURCE_PATH}/*.inl ${TAO_SOURCE_PATH}/*.cpp)
file(INSTALL ${HEADER_FILES} DESTINATION ${CURRENT_PACKAGES_DIR}/include/tao/)

install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "AnyTypeCode")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "BiDir_GIOP")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "CodecFactory")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "Codeset")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "Compression")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "Compression/bzip2")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "Compression/lzo")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "Compression/rle")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "Compression/zlib")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "CSD_Framework")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "CSD_ThreadPool")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "DiffServPolicy")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "Dynamic_TP")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "DynamicAny")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "DynamicInterface")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "EndpointPolicy")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "ETCL")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "FlResource")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "FoxResource")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "IFR_Client")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "ImR_Client")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "IORInterceptor")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "IORManipulation")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "IORTable")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "Messaging")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "Monitor")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "ObjRefTemplate")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "PI")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "PI_Server")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "PortableServer")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "QtResource")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "RTCORBA")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "RTPortableServer")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "RTScheduling")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "SmartProxies")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "Strategies")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "TkResource")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "TransportCurrent")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "TypeCodeFactory")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "Utils")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "Valuetype")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "XtResource")
install_tao_headers_subdirectory(${TAO_SOURCE_PATH} "ZIOP")

install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "") 
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "AV")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Concurrency")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "CosEvent")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "ESF")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Event")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "FaultTolerance")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "FtRtEvent/ClientORB")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "FtRtEvent/EventChannel")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "FtRtEvent/Utils")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "HTIOP")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "IFRService")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "LifeCycle")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "LoadBalancing")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Log")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Naming")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Naming/FaultTolerant")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Notify")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Notify/Any")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Notify/MonitorControl")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Notify/MonitorControlExt")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Notify/Sequence")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Notify/Structured")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "PortableGroup")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Property")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Sched")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Security")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "SSLIOP")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Time")
install_orbsvcs_headers_subdirectory(${TAO_ROOT}/orbsvcs/orbsvcs "Trader")


install_tao_executables(${ACE_ROOT}/bin "ace_gperf")
install_tao_executables(${ACE_ROOT}/bin "tao_catior")
install_tao_executables(${ACE_ROOT}/bin "tao_idl")
install_tao_executables(${ACE_ROOT}/bin "tao_ifr")
install_tao_executables(${ACE_ROOT}/bin "tao_imr")
install_tao_executables(${ACE_ROOT}/bin "tao_nsadd")
install_tao_executables(${ACE_ROOT}/bin "tao_nsdel")
install_tao_executables(${ACE_ROOT}/bin "tao_nsgroup")
install_tao_executables(${ACE_ROOT}/bin "tao_nslist")



# Install the libraries
function(install_ace_library SOURCE_PATH ACE_LIBRARY)
    set(LIB_PATH ${SOURCE_PATH}/lib/)
    if (VCPKG_LIBRARY_LINKAGE STREQUAL dynamic)
        # Install the DLL files
        file(INSTALL
            ${LIB_PATH}/${ACE_LIBRARY}d.dll
            DESTINATION ${CURRENT_PACKAGES_DIR}/debug/bin
        )
        file(INSTALL
            ${LIB_PATH}/${ACE_LIBRARY}.dll
            DESTINATION ${CURRENT_PACKAGES_DIR}/bin
        )
    endif()

    # Install the lib files
    file(INSTALL
        ${LIB_PATH}/${LIB_PREFIX}${ACE_LIBRARY}${DLL_DECORATOR}${LIB_DEBUG_SUFFIX}
        DESTINATION ${CURRENT_PACKAGES_DIR}/debug/lib
    )

    file(INSTALL
        ${LIB_PATH}/${LIB_PREFIX}${ACE_LIBRARY}${DLL_DECORATOR}${LIB_RELEASE_SUFFIX}
        DESTINATION ${CURRENT_PACKAGES_DIR}/lib
    )
endfunction()

install_ace_library(${ACE_ROOT} "ACE")
install_ace_library(${ACE_ROOT} "ACE_Compression")
install_ace_library(${ACE_ROOT} "ACE_ETCL")
install_ace_library(${ACE_ROOT} "ACE_ETCL_Parser")
install_ace_library(${ACE_ROOT} "ACE_HTBP")	
install_ace_library(${ACE_ROOT} "ACE_INet")
install_ace_library(${ACE_ROOT} "ACE_INet_SSL")
install_ace_library(${ACE_ROOT} "ACE_Monitor_Control")
if(NOT VCPKG_CMAKE_SYSTEM_NAME)
  install_ace_library(${ACE_ROOT} "ACE_QoS")
endif()
install_ace_library(${ACE_ROOT} "ACE_QtReactor")
install_ace_library(${ACE_ROOT} "ACE_RLECompression")
install_ace_library(${ACE_ROOT} "ACE_RMCast")
install_ace_library(${ACE_ROOT} "ACE_SSL")
install_ace_library(${ACE_ROOT} "ACE_TMCast")
install_ace_library(${ACE_ROOT} "ACEXML")
install_ace_library(${ACE_ROOT} "ACEXML_Parser")
#install_ace_library(${ACE_ROOT} "ACEXML_XML_Svc_Conf_Parser")
install_ace_library(${ACE_ROOT} "Kokyu")
install_ace_library(${ACE_ROOT} "TAO")
install_ace_library(${ACE_ROOT} "TAO_AnyTypeCode")
install_ace_library(${ACE_ROOT} "TAO_Async_ImR_Client_IDL")
install_ace_library(${ACE_ROOT} "TAO_Async_IORTable")
install_ace_library(${ACE_ROOT} "TAO_AV")
install_ace_library(${ACE_ROOT} "TAO_BiDirGIOP")
install_ace_library(${ACE_ROOT} "TAO_Catior_i")
install_ace_library(${ACE_ROOT} "TAO_CodecFactory")
install_ace_library(${ACE_ROOT} "TAO_Codeset")
install_ace_library(${ACE_ROOT} "TAO_Compression")
install_ace_library(${ACE_ROOT} "TAO_CosConcurrency")
install_ace_library(${ACE_ROOT} "TAO_CosConcurrency_Serv")
install_ace_library(${ACE_ROOT} "TAO_CosConcurrency_Skel")
install_ace_library(${ACE_ROOT} "TAO_CosEvent")
install_ace_library(${ACE_ROOT} "TAO_CosEvent_Serv")
install_ace_library(${ACE_ROOT} "TAO_CosEvent_Skel")
install_ace_library(${ACE_ROOT} "TAO_CosLifeCycle")
install_ace_library(${ACE_ROOT} "TAO_CosLifeCycle_Skel")
install_ace_library(${ACE_ROOT} "TAO_CosLoadBalancing")
install_ace_library(${ACE_ROOT} "TAO_CosNaming")
install_ace_library(${ACE_ROOT} "TAO_CosNaming_Serv")
install_ace_library(${ACE_ROOT} "TAO_CosNaming_Skel")
install_ace_library(${ACE_ROOT} "TAO_CosNotification")
install_ace_library(${ACE_ROOT} "TAO_CosNotification_MC")
install_ace_library(${ACE_ROOT} "TAO_CosNotification_Serv")
install_ace_library(${ACE_ROOT} "TAO_CosNotification_Skel")
install_ace_library(${ACE_ROOT} "TAO_CosNotification_Persist")
install_ace_library(${ACE_ROOT} "TAO_CosProperty")
install_ace_library(${ACE_ROOT} "TAO_CosProperty_Serv")
install_ace_library(${ACE_ROOT} "TAO_CosProperty_Skel")
install_ace_library(${ACE_ROOT} "TAO_CosTime")
install_ace_library(${ACE_ROOT} "TAO_CosTime_Serv")
install_ace_library(${ACE_ROOT} "TAO_CosTrading")
install_ace_library(${ACE_ROOT} "TAO_CosTrading_Serv")
install_ace_library(${ACE_ROOT} "TAO_CosTrading_Skel")
install_ace_library(${ACE_ROOT} "TAO_CSD_Framework")
install_ace_library(${ACE_ROOT} "TAO_CSD_ThreadPool")
install_ace_library(${ACE_ROOT} "TAO_DiffServPolicy")
install_ace_library(${ACE_ROOT} "TAO_DsEventLogAdmin")
install_ace_library(${ACE_ROOT} "TAO_DsEventLogAdmin_Serv")
install_ace_library(${ACE_ROOT} "TAO_DsEventLogAdmin_Skel")
install_ace_library(${ACE_ROOT} "TAO_DsLogAdmin")
install_ace_library(${ACE_ROOT} "TAO_DsLogAdmin_Serv")
install_ace_library(${ACE_ROOT} "TAO_DsLogAdmin_Skel")
install_ace_library(${ACE_ROOT} "TAO_DsNotifyLogAdmin")
install_ace_library(${ACE_ROOT} "TAO_DsNotifyLogAdmin_Serv")
install_ace_library(${ACE_ROOT} "TAO_DsNotifyLogAdmin_Skel")
install_ace_library(${ACE_ROOT} "TAO_Dynamic_TP")
install_ace_library(${ACE_ROOT} "TAO_DynamicAny")
install_ace_library(${ACE_ROOT} "TAO_DynamicInterface")
install_ace_library(${ACE_ROOT} "TAO_EndpointPolicy")
install_ace_library(${ACE_ROOT} "TAO_ETCL")
install_ace_library(${ACE_ROOT} "TAO_FT_Naming_Serv")
install_ace_library(${ACE_ROOT} "TAO_FT_ServerORB")
install_ace_library(${ACE_ROOT} "TAO_FtNaming")
install_ace_library(${ACE_ROOT} "TAO_FtNamingReplication")
install_ace_library(${ACE_ROOT} "TAO_FTORB_Utils")
install_ace_library(${ACE_ROOT} "TAO_FTRT_ClientORB")
install_ace_library(${ACE_ROOT} "TAO_FTRT_EventChannel")
install_ace_library(${ACE_ROOT} "TAO_FtRtEvent")
install_ace_library(${ACE_ROOT} "TAO_HTIOP")
install_ace_library(${ACE_ROOT} "TAO_IDL_BE")
install_ace_library(${ACE_ROOT} "TAO_IDL_FE")
install_ace_library(${ACE_ROOT} "TAO_IFR_BE")
install_ace_library(${ACE_ROOT} "TAO_IFR_Client")
install_ace_library(${ACE_ROOT} "TAO_IFR_Client_skel")
install_ace_library(${ACE_ROOT} "TAO_ImR_Activator_IDL")
install_ace_library(${ACE_ROOT} "TAO_ImR_Client")
install_ace_library(${ACE_ROOT} "TAO_ImR_Locator_IDL")
install_ace_library(${ACE_ROOT} "TAO_IORInterceptor")
install_ace_library(${ACE_ROOT} "TAO_IORManip")
install_ace_library(${ACE_ROOT} "TAO_IORTable")
install_ace_library(${ACE_ROOT} "TAO_Messaging")
install_ace_library(${ACE_ROOT} "TAO_Monitor")
install_ace_library(${ACE_ROOT} "TAO_Notify_Service")
install_ace_library(${ACE_ROOT} "TAO_ObjRefTemplate")
install_ace_library(${ACE_ROOT} "TAO_PI")
install_ace_library(${ACE_ROOT} "TAO_PI_Server")
install_ace_library(${ACE_ROOT} "TAO_PortableGroup")
install_ace_library(${ACE_ROOT} "TAO_PortableServer")
install_ace_library(${ACE_ROOT} "TAO_QtResource")
install_ace_library(${ACE_ROOT} "TAO_RLECompressor")
install_ace_library(${ACE_ROOT} "TAO_RT_Notification")
install_ace_library(${ACE_ROOT} "TAO_RTCORBA")
install_ace_library(${ACE_ROOT} "TAO_RTEvent")
install_ace_library(${ACE_ROOT} "TAO_RTEvent_Skel")
install_ace_library(${ACE_ROOT} "TAO_RTEventLogAdmin")
install_ace_library(${ACE_ROOT} "TAO_RTEventLogAdmin_Skel")
install_ace_library(${ACE_ROOT} "TAO_RTPortableServer")
install_ace_library(${ACE_ROOT} "TAO_RTSched")
install_ace_library(${ACE_ROOT} "TAO_RTScheduler")
install_ace_library(${ACE_ROOT} "TAO_Security")
install_ace_library(${ACE_ROOT} "TAO_SmartProxies")
install_ace_library(${ACE_ROOT} "TAO_SSLIOP")
install_ace_library(${ACE_ROOT} "TAO_Strategies")
install_ace_library(${ACE_ROOT} "TAO_Svc_Utils")
install_ace_library(${ACE_ROOT} "TAO_TC")
install_ace_library(${ACE_ROOT} "TAO_TC_IIOP")
install_ace_library(${ACE_ROOT} "TAO_TypeCodeFactory")
install_ace_library(${ACE_ROOT} "TAO_Utils")
install_ace_library(${ACE_ROOT} "TAO_Valuetype")
install_ace_library(${ACE_ROOT} "TAO_ZIOP")
install_ace_library(${ACE_ROOT} "TAO_ZlibCompressor")


# Handle copyright
file(COPY ${ACE_ROOT}/COPYING DESTINATION ${CURRENT_PACKAGES_DIR}/share/ace-tao)
file(RENAME ${CURRENT_PACKAGES_DIR}/share/ace-tao/COPYING ${CURRENT_PACKAGES_DIR}/share/ace-tao/copyright)

vcpkg_copy_pdbs()
